*** create add & commit
*** 创建一个文件并把它添加上传到远程remote
$ vi readme.txt
$ git add readme
fatal: pathspec 'readme' did not match any files
$ git add readme.txt
$ git commit -m "wrote a readme file"
my first readme will be changed!

*** Please tell me who you are.
*** 绑定自己的账号

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'guoer@localhost.(none)')
$ git config --global user.email "149*******@qq.com"
$ git commit -m "wrote a readme file"
[master (root-commit) 47d4449] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt

*** git status 显示状态 例如修改(modified)了的文件等
*** git diff 显示differences 可看出具体的不一样的部分
$ ls
readme.txt
$ vi readme.txt
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   readme.txt

no changes added to commit (use "git add" and/or "git commit -a")
$ git diff
diff --git a/readme.txt b/readme.txt
index 9a916c0..199bcbd 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-my first readme!
+my first readme will be changed!
$ git add readme.txt
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   readme.txt

$ git commit -m "changed a readme file"
[master c1432aa] changed a readme file
 1 file changed, 1 insertion(+), 1 deletion(-)
$ ls
readme.txt
$ git status
On branch master
nothing to commit, working tree clean

*** vi编辑 cat显示内容 rm删除文件
$ vi readme.txt
$ cat readme.txt
my first readme will be changed!
before add

*** git checkout 
$ git checkout -- readme.txt
$ cat readme.txt
my first readme will be changed!
$ vi readme.txt
$ cat readme.txt
my first readme will be changed!
before commit
$ git checkout -- readme.txt
$ cat readme.txt
my first readme will be changed!
before commit
$ git reset HEAD readme.txt
Unstaged changes after reset:
M	readme.txt
$ cat readme.txt
my first readme will be changed!
before commit
$ git checkout -- readme.txt
$ cat readme.txt
my first readme will be changed!
$ git status
On branch master
nothing to commit, working tree clean
$ vi test.txt
$ git add test.txt
$ git commit -m "create a test"
[master 77b6ebb] create a test
 1 file changed, 2 insertions(+)
 create mode 100644 test.txt
$ rm test.txt
$ git status
On branch master
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	deleted:    test.txt

no changes added to commit (use "git add" and/or "git commit -a")
$ git rm test.txt      (Here, ‘git add’ is the same!)
rm 'test.txt'
$ git commit -m "delete test"
[master 3be8976] delete test
 1 file changed, 2 deletions(-)
 delete mode 100644 test.txt
$ git status
On branch master
nothing to commit, working tree clean

$ rm test.txt
$ git status
On branch master
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	deleted:    test.txt

no changes added to commit (use "git add" and/or "git commit -a")
$ git add test.txt
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	deleted:    test.txt
$ cat test.txt
cat: test.txt: No such file or directory

$ vi test.txt
$ git add test.txt
$ git commit -m "create a test"
[master 36429dc] create a test
 1 file changed, 1 insertion(+)
$ rm test.txt
$ cat test.txt
cat: test.txt: No such file or directory
$ git checkout -- test.txt
$ cat test.txt
this is a misdeleted document!

$ cat test.txt
this is a misdeleted document!

$ rm test.txt
$ git rm test.txt
rm 'test.txt'
$ git commit -m "delete test"
[master 44f5e56] delete test
 1 file changed, 2 deletions(-)
 delete mode 100644 test.txt
$ git checkout -- test.txt
error: pathspec 'test.txt' did not match any file(s) known to git

***创建github密钥
$  ssh-keygen -t rsa -C "Your e-mail here"

$ cd ~
$ ls
Desktop		mygit
$ ls
id_rsa		id_rsa.pub
$ cat id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABA...(This's what you'll see here, and copy it~)

*** 绑定远程地址 即自己的GitHub文件夹
*** git push/clone把自己的本地文件推上(push)GitHub或者从上面克隆(clone)代码
$ git remote add origin https://github.com/GraceeFlower/mygit.git
  (if you typed incorrectly, try using 'git remote rm origin' to cancel~)
  (这要是打错了地址可以用git remote rm origin撤销)
$ git push -u origin master
Username for 'https://github.com': GraceeFlower (input your username)
Password for 'https://GraceeFlower@github.com': (this is your password)
Enumerating objects: 17, done.
Counting objects: 100% (17/17), done.
Delta compression using up to 4 threads
Compressing objects: 100% (10/10), done.
Writing objects: 100% (17/17), 1.40 KiB | 479.00 KiB/s, done.
Total 17 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), done.
To https://github.com/GraceeFlower/mygit.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.

$ git clone git@github.com:GraceeFlower/gitskills.git
Cloning into 'gitskills'...
The authenticity of host 'github.com (52.74.223.119)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'github.com,52.74.223.119' (RSA) to the list of known hosts.

^C
$ git clone git@github.com:GraceeFlower/gitskills.git
   (Here we can also use http-protocol, expressd as https://github.com/GraceeFlower/gitskills)
   (在这也可以用http协议，即https://github.com/GraceeFlower/gitskills)
Cloning into 'gitskills'...
Warning: Permanently added the RSA host key for IP address '13.229.188.59' to the list of known hosts.
remote: Enumerating objects: 3, done.
remote: Counting objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Receiving objects: 100% (3/3), done.
$ cd gitskills
$ ls
README.md

*** git checkout切换分支
*** git branch显示分支
*** git merge合并分支
$ git checkout -b dev
   (等价于
	git branch dev创建分支
	git checkout dev切换分支)
Switched to a new branch 'dev'
$ git branch
* dev
  master
$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.
$ git merge dev
     (合并某分支到当前分支)
Already up to date.
$ git branch -d dev
Deleted branch dev (was e8494b3).
$ git branch
* master

$git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.

*** git tag给自己的命令加个昵称(缩写)吧～
*** git log查看分支图
$git tag v1.0
$git tag
v1.0
$git log --pretty=oneline --abbrev-commit
e8494b3 (HEAD -> master, tag: v1.0, origin/master, origin/HEAD) Initial commit

$git checkout dev
Switched to branch 'dev'
$git log --pretty=oneline --abbrev-commit
772e6cc (HEAD -> dev, origin/dev) dev
e8494b3 (tag: v1.0, origin/master, origin/HEAD, master) Initial commit
$git tag -a v0.9 -m "version 0.9" 772e6cc
$git tag
v0.9
v1.0
$git show v0.9
tag v0.9
Tagger: ... <149***@qq.com>
Date:   Tue Aug 13 17:24:17 2019 +0800

version 0.9

commit 772e6cc1d1ca573f1a1a69b37dad2e3ee25d9464 (HEAD -> dev, tag: v0.9, origin/dev)
Author: ... <149***@qq.com>
Date:   Tue Aug 13 16:52:53 2019 +0800

    dev

diff --git a/README.txt b/README.txt
new file mode 100644
index 0000000..9c2ed85
--- /dev/null
+++ b/README.txt
@@ -0,0 +1 @@
+This is the first dev!
$git tag -d v0.9
Deleted tag 'v0.9' (was 4adf610)
$git tag
v1.0
$git push origin v1.0
Total 0 (delta 0), reused 0 (delta 0)
To github.com:GraceeFlower/gitskills.git
 * [new tag]         v1.0 -> v1.0
$git push origin :refs/tags/v1.0
To github.com:GraceeFlower/gitskills.git
 - [deleted]         v1.0

git commit 不输入 -m 以及后面的内容会进入vim模式
vi & vim 有两种工作模式：
* （1） 命令模式：接受、执行 vi & vim 操作命令的模式，打开文件后的默认模式；
* （2） 编辑模式：对打开的文件内容进行 增、删、改 操作的模式； 在编辑模式下按下 ESC 键，回退到命令模式。创建、打开文件：$ vi [filename] 
* （1）使用 vi 加 文件路径（或文件名）的模式打开文件，如果文件存在则打开现有文件，如果文件不存在则新建文件，并在终端最下面一行显示打开的是一个新文件。
* （2）键盘输入字母 “i”或“Insert”键进入最常用的插入编辑模式。3、保存文件： 
* （1）在插入编辑模式下编辑文件。
* （2）按下 “ESC” 键，退出编辑模式，切换到命令模式。
* （3）在命令模式下键入"ZZ"或者":wq"保存修改并且退出 vi 。
* （4）如果只想保存文件，则键入":w"，回车后底行会提示写入操作结果，并保持停留在命令模式。4、放弃所有文件修改： 
* （1）放弃所有文件修改：按下 "ESC" 键进入命令模式，键入 ":q!" 回车后放弃修改并退出vi。
* （2）放弃所有文件修改，但不退出 vi ，即回退到文件打开后最后一次保存操作的状态，继续进行文件操作：按下 "ESC" 键进入命令模式，键入 ":e!" ，回车后回到命令模式。
